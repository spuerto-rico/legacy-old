# Uncomment the next line to define a global platform for your project
# platform :ios, '9.0'

target 'LegacyNetwork' do
  # Comment the next line if you don't want to use dynamic frameworks
  use_frameworks!

  # Pods for LegacyNetwork

  # target 'LegacyNetwork-tvOSTests' do
  #   inherit! :search_paths
  #   # Pods for testing
  # end

  target 'LegacyNetworkTests' do
    inherit! :search_paths
    # Pods for testing
  end

  
  post_install do |installer|
    ## Fix for XCode 12.5
    find_and_replace("../node_modules/react-native/React/CxxBridge/RCTCxxBridge.mm",
    "_initializeModules:(NSArray<id<RCTBridgeModule>> *)modules", "_initializeModules:(NSArray<Class> *)modules")
    find_and_replace("../node_modules/react-native/ReactCommon/turbomodule/core/platform/ios/RCTTurboModuleManager.mm",
        "RCTBridgeModuleNameForClass(module))", "RCTBridgeModuleNameForClass(Class(module)))")
  end

  react_project = Xcodeproj::Project.open("../node_modules/react-native/React/React.xcodeproj")
  react_project.main_group["React/Views"].files.each do |file|   
    if file.path.match(/^RCTWebView/) 
      file.remove_from_project
    end   
  end   
  react_project.save

end

target 'LegacyNetwork-tvOS' do
  # Comment the next line if you don't want to use dynamic frameworks
  use_frameworks!

  # Pods for LegacyNetwork-tvOS

  target 'LegacyNetwork-tvOSTests' do
    inherit! :search_paths
    # Pods for testing
  end

end

def find_and_replace(dir, findstr, replacestr)
  Dir[dir].each do |name|
      text = File.read(name)
      replace = text.gsub(findstr,replacestr)
      if text != replace
          puts "Fix: " + name
          File.open(name, "w") { |file| file.puts replace }
          STDOUT.flush
      end
  end
  Dir[dir + '*/'].each(&method(:find_and_replace))
end
